#!/usr/bin/python3
import numpy as np
import pandas as pd
import scipy as sp
from scipy.stats import ttest_1samp
import sys, os
import statsmodels
from statsmodels.stats.multitest import multipletests
from venn import venn
import matplotlib.pyplot as plt

#This allows you to change text in illustrator for the PDFs exported in this function
import matplotlib
plt.rcParams['pdf.fonttype'] = 42
#This changes the sans-serif font output for plots to Arial
plt.rcParams.update({'font.sans-serif':'Arial'})

# This code was written by Andrew J. Borchert (NREL).
# This function generates a Venn Diagram for lists of genes denoted as having statistically significant (user defined) fitness differences between 2-4 test enrichment and reference enrichment sets (e.g. M9 glucose vs. M9 glucose + ferulate). 
#    This type of analysis can be useful for defining genetic fitness determinants for groups of enrichments. For example an analysis using data for M9 glucose vs. M9 glucose + ferulate and M9 glucose vs. M9 glucose + 4-coumarate would help reveal
#    genetic factors relating generally to hydroxycinnamate stress and teasing those apart from those specific to each hydroxycinnamic acid. 

# Uses the venn function as described here: https://github.com/LankyCyril/pyvenn/blob/master/pyvenn-demo.ipynb

#Usage:
#python3 12_VennDiag.py {q_value_cutoff} {PATH/Annotated_Summary_File_1.csv} {PATH/Annotated_Summary_File_2.csv} OPTIONAL: {PATH/Annotated_Summary_File_3.csv} {PATH/Annotated_Summary_File_4.csv}

#Inputs:
#Annotated_Summary_Files -- Annotated Fitness summary file for the first enrichment condition, as generated by the 9_Summary_annotate.py Function. Two files are required and up to four can be provided

#Outputs:
# _Venn_DiagramSig_genes.csv -- A table listing the genes from each condition that satisfy the statistical cutoff.
# _Venn_Segments.csv -- A table of the genes belonging to each section of the Venn Diagram.
# _Venn.pdf -- Graph that takes all genes that meet the provided q value cutoff in each enrichment set and then assembles them into a Venn Diagram.

A = len(sys.argv)
if A < 4:
	print('\nMust call this function with a q-value cutoff and at least two datasets to compare: 6B_Venn_Diag.py q-val_cutoff C1vC2_Annotated_Summary C1vC4__Annotated_Summary \n')
	quit()

if A > 6:
	print('\nMust call this function with a q-value cutoff and no more than four datasets to compare: 6B_Venn_Diag.py q-val_cutoff 1 2 3 4 \n')
	quit()
	
# sysnames
q_val = sys.argv[1]
Condition1 = sys.argv[2]
Condition2 = sys.argv[3]
if A == 5:
	Condition3 = sys.argv[4]
if A == 6:
	Condition3 = sys.argv[4]
	Condition4 = sys.argv[5]

# load each .csv files with pandas, reading all rows 
# migrate locus tag and q-value data into a numpy array
# find the condition label from the input dataset title
# make lists of genes that have a q-value below the input q-value cutoff 
CondA = pd.read_csv(Condition1)
CondA = np.array(CondA[:], dtype=str)
CondAGenes = CondA[1:,0]
CondAqvals = CondA[1:,15]
label = sys.argv[2]
CondALabel = label.split('_')[-3]
SigAIDs =[]
for i in range(0,len(CondAqvals)):
	if CondAqvals[i] < q_val: 
		SigAIDs = np.append(SigAIDs, CondAGenes[i])

CondB = pd.read_csv(Condition2)
CondB = np.array(CondB[:], dtype=str)
CondBGenes = CondB[1:,0]
CondBqvals = CondB[1:,15]
label = sys.argv[3]
CondBLabel = label.split('_')[-3] 
SigBIDs =[]
for i in range(0,len(CondBqvals)):
	if CondBqvals[i] < q_val: 
		SigBIDs = np.append(SigBIDs, CondBGenes[i])

if A == 5:
	CondC = pd.read_csv(Condition3)
	CondC = np.array(CondC[:], dtype=str)
	CondCGenes = CondC[1:,0]
	CondCqvals = CondC[1:,15]
	label = sys.argv[4]
	CondCLabel = label.split('_')[-3] 
	SigCIDs =[]
	for i in range(0,len(CondCqvals)):
		if CondCqvals[i] < q_val: 
			SigCIDs = np.append(SigCIDs, CondCGenes[i])
if A == 6:
	CondC = pd.read_csv(Condition3)
	CondC = np.array(CondC[:], dtype=str)
	CondCGenes = CondC[1:,0]
	CondCqvals = CondC[1:,15]
	label = sys.argv[4]
	endlabel = label.split('+')[1]
	CondCLabel = endlabel.split('_')[0]
	SigCIDs =[]
	for i in range(0,len(CondCqvals)):
		if CondCqvals[i] < q_val: 
			SigCIDs = np.append(SigCIDs, CondCGenes[i])

	CondD = pd.read_csv(Condition4)
	CondD = np.array(CondD[:], dtype=str)
	CondDGenes = CondD[1:,0]
	CondDqvals = CondD[1:,15]
	label = sys.argv[5]
	CondDLabel = label.split('_')[-3]
	SigDIDs =[]
	for i in range(0,len(CondDqvals)):
		if CondDqvals[i] < q_val: 
			SigDIDs = np.append(SigDIDs, CondDGenes[i]) 
#
#
#Assemble a csv file listing the genes from each condition that satisfy the statistical cutoff and then assemble the appropriate venn diagram, based upon how many conditions to compare
#
#
if A == 4:
	listA = np.append(CondALabel,SigAIDs)
	listB = np.append(CondBLabel,SigBIDs)
	Lists = [listA,listB]
	df = pd.DataFrame(Lists)
	df.fillna('', inplace=True)
	Full_Table = df.transpose()
	Full_Table = np.array(Full_Table[:], dtype=str)
	np.savetxt((CondALabel+'_'+CondBLabel+'_'+q_val+'_Venn_DiagramSig_genes.csv'), Full_Table, delimiter=',', fmt='%s')

	#assign the gene lists to seperate arrays, excluding empty strings from the array
	np1 = listA[1:]
	array1 = []
	for string in np1:
		if(string !=""):
			array1.append(string)
	np2 = listB[1:]
	array2 = []
	for string in np2:
		if(string !=""):
			array2.append(string)
	array1_label = CondALabel
	array2_label = CondBLabel
	#create a set of each of the columns in the csv file
	list1 =set(array1)
	list2 =set(array2)
	#create a dictonary of the two sets
	Venn_dict = {
		array1_label:list1,
		array2_label:list2,
	}
	#identify genes in each section of the Venn Diagram
	AnB = list1.intersection(list2)
	Aonly = list(list1-AnB)
	Bonly = list(list2-AnB)
	AnBonly = list(AnB)
	#Make a table of the genes belonging to each section of the Venn Diagram
	All_pairs = [Aonly,Bonly,AnBonly]
	df = pd.DataFrame(All_pairs)
	df.fillna('', inplace=True)
	Newdf = df.transpose()
	columns=[array1_label,array2_label,array1_label+'+'+array2_label]
	Newdf.to_csv(array1_label+'_'+array2_label+'_'+q_val+'_Venn_Segments.csv', header=columns)
	#make the venn diagram
	venn(Venn_dict,fmt="{size}",fontsize=12,figsize=(8, 8))
	plt.title('Significant (q < '+q_val+') Genes for \n'+array1_label+' and '+array2_label)
	plt.savefig(array1_label+'_'+array2_label+'_'+q_val+'_Venn.pdf', dpi = 300)

if A == 5:
	listA = np.append(CondALabel,SigAIDs)
	listB = np.append(CondBLabel,SigBIDs)
	listC = np.append(CondCLabel,SigCIDs)
	Lists = [listA,listB,listC]
	df = pd.DataFrame(Lists)
	df.fillna('', inplace=True)
	Full_Table = df.transpose()
	Full_Table = np.array(Full_Table[:], dtype=str)
	np.savetxt((CondALabel+'_'+CondBLabel+'_'+CondCLabel+'_'+q_val+'_Venn_DiagramSig_genes.csv'), Full_Table, delimiter=',', fmt='%s')

	#assign the gene lists to seperate arrays, excluding empty strings from the array
	np1 = listA[1:]
	array1 = []
	for string in np1:
		if(string !=""):
			array1.append(string)
	np2 = listB[1:]
	array2 = []
	for string in np2:
		if(string !=""):
			array2.append(string)
	np3 = listC[1:]
	array3 = []
	for string in np3:
		if(string !=""):
			array3.append(string)
	array1_label = CondALabel
	array2_label = CondBLabel
	array3_label = CondCLabel
	#create a set of each of the columns in the csv file
	list1 =set(array1)
	list2 =set(array2)
	list3 =set(array3)
	#create a dictonary of the three sets
	Venn_dict = {
		array1_label:list1,
		array2_label:list2,
		array3_label:list3,
	}
	#identify genes in each section of the Venn Diagram
	AnB = list1.intersection(list2)
	AnC = list1.intersection(list3)
	BnC = list2.intersection(list3)
	AnBnC = list1.intersection(BnC)
	Aonly = list(list1-list2-list3)
	Bonly = list(list2-list1-list3)
	Conly = list(list3-list1-list2)
	AnBonly = list(AnB-AnBnC)
	AnConly = list(AnC-AnBnC)
	BnConly = list(BnC-AnBnC)
	AnBnConly = list(AnBnC)
	#Make a table of the genes belonging to each section of the Venn Diagram
	All_pairs = [Aonly,Bonly,Conly,AnBonly,AnConly,BnConly,AnBnConly]
	df = pd.DataFrame(All_pairs)
	df.fillna('', inplace=True)
	Newdf = df.transpose()
	columns=[array1_label,array2_label,array3_label,array1_label+'+'+array2_label,array1_label+'+'+array3_label,array2_label+'+'+array3_label,array1_label+'+'+array2_label+'+'+array3_label]
	Newdf.to_csv(array1_label+'_'+array2_label+'_'+array3_label+'_'+q_val+'_Venn_Segments.csv', header=columns)
	#make the venn diagram
	venn(Venn_dict,fmt="{size}",fontsize=12,figsize=(8, 8))
	plt.title('Significant (q < '+q_val+') Genes for\n'+array1_label+', '+array2_label+', and '+array3_label)
	plt.savefig(array1_label+'_'+array2_label+'_'+array3_label+'_'+q_val+'_Venn.pdf', dpi = 300)

if A == 6:
	listA = np.append(CondALabel,SigAIDs)
	listB = np.append(CondBLabel,SigBIDs)
	listC = np.append(CondCLabel,SigCIDs)
	listD = np.append(CondDLabel,SigDIDs)
	Lists = [listA,listB,listC,listD]
	df = pd.DataFrame(Lists)
	df.fillna('', inplace=True)
	Full_Table = df.transpose()
	Full_Table = np.array(Full_Table[:], dtype=str)
	np.savetxt((CondALabel+'_'+CondBLabel+'_'+CondCLabel+'_'+CondDLabel+'_'+q_val+'_Venn_DiagramSig_genes.csv'), Full_Table, delimiter=',', fmt='%s')

	#assign the gene lists to seperate arrays, excluding empty strings from the array
	np1 = listA[1:]
	array1 = []
	for string in np1:
		if(string !=""):
			array1.append(string)
	np2 = listB[1:]
	array2 = []
	for string in np2:
		if(string !=""):
			array2.append(string)
	np3 = listC[1:]
	array3 = []
	for string in np3:
		if(string !=""):
			array3.append(string)
	np4 = listD[1:]
	array4 = []
	for string in np4:
		if(string !=""):
			array4.append(string)
	array1_label = CondALabel
	array2_label = CondBLabel
	array3_label = CondCLabel
	array4_label = CondDLabel
	#create a set of each of the columns in the csv file
	list1 =set(array1)
	list2 =set(array2)
	list3 =set(array3)
	list4 =set(array4)
	#create a dictonary of the four sets
	Venn_dict = {
		array1_label:list1,
		array2_label:list2,
		array3_label:list3,
		array4_label:list4,
	}
	#identify genes in each section of the Venn Diagram
	AnB = list1.intersection(list2)
	AnC = list1.intersection(list3)
	AnD = list1.intersection(list4)
	BnC = list2.intersection(list3)
	BnD = list2.intersection(list4)
	CnD = list3.intersection(list4)
	AnBnC = list1.intersection(BnC)
	AnBnD = list1.intersection(BnD)
	AnCnD = list1.intersection(CnD)
	BnCnD = list2.intersection(CnD)
	AnBnCnD = list1.intersection(BnCnD)
	Aonly = list(list1-AnB-AnC-AnD)
	Bonly = list(list2-AnB-BnC-BnD)
	Conly = list(list3-AnC-BnC-CnD)
	Donly = list(list4-AnD-BnD-CnD)
	AnBonly = list(AnB-AnC-AnD)
	AnConly = list(AnC-AnB-AnD)
	AnDonly = list(AnD-AnC-AnB)
	BnConly = list(BnC-AnB-BnD)
	BnDonly = list(BnD-BnC-AnB)
	CnDonly = list(CnD-AnC-BnC)
	AnBnConly = list(AnBnC-list4)
	AnBnDonly = list(AnBnD-list3)
	AnCnDonly = list(AnCnD-list2)
	BnCnDonly = list(BnCnD-list1)
	AnBnCnDonly = list(AnBnCnD)
	#Make a table of the genes belonging to each section of the Venn Diagram
	All_pairs = [Aonly,Bonly,Conly,Donly,AnBonly,AnConly,AnDonly,BnConly,BnDonly,CnDonly,AnBnConly,AnBnDonly,AnCnDonly,BnCnDonly,AnBnCnDonly]
	df = pd.DataFrame(All_pairs)
	df.fillna('', inplace=True)
	Newdf = df.transpose()
	columns=[array1_label,array2_label,array3_label,array4_label,array1_label+'+'+array2_label,array1_label+'+'+array3_label,array1_label+'+'+array4_label,array2_label+'+'+array3_label,array2_label+'+'+array4_label,array3_label+'+'+array4_label, array1_label+'+'+array2_label+'+'+array3_label, array1_label+'+'+array2_label+'+'+array4_label, array1_label+'+'+array3_label+'+'+array4_label, array2_label+'+'+array3_label+'+'+array4_label, array1_label+'+'+array2_label+'+'+array3_label+'+'+array4_label]
	Newdf.to_csv(array1_label+'_'+array2_label+'_'+array3_label+'_'+array4_label+'_'+q_val+'_Venn_Segments.csv', header=columns)
	#make the venn diagram
	venn(Venn_dict,fmt="{size}",fontsize=12,figsize=(8, 8))
	plt.title('Significant (q < '+q_val+') Genes for\n'+array1_label+', '+array2_label+', '+array3_label+', and '+array4_label)
	plt.savefig(array1_label+'_'+array2_label+'_'+array3_label+'_'+array4_label+'_'+q_val+'_Venn.pdf', dpi = 300)
